// -------------------------------------------------------------
// 
// File Name: hdl_prj\hdlsrc\new_7\enable.v
// Created: 2025-06-24 11:26:22
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: enable
// Source Path: new_7/enable
// Hierarchy Level: 1
// Model version: 1.3
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module enable
          (clk,
           reset_x,
           enb,
           enable_1,
           length,
           out);

  // Default encoded enumeration values for type state_type_is_enable
  parameter state_type_is_enable_IN_S0 = 2'd0, state_type_is_enable_IN_nop4 = 2'd1, state_type_is_enable_IN_nop0 = 2'd2;

  input   clk;
  input   reset_x;
  input   enb;
  input   enable_1;
  input   [7:0] length;  // uint8
  output  out;


  reg [7:0] i;  // uint8
  reg [1:0] is_enable;  // uint8
  reg  out_reg;
  reg [7:0] i_next;  // uint8
  reg [1:0] is_enable_next;  // enum type state_type_is_enable (3 enums)
  reg  out_reg_next;
  reg [8:0] add_temp;  // ufix9
  reg [8:0] add_temp_0;  // ufix9
  reg [8:0] t_0;  // ufix9
  reg [8:0] t_1;  // ufix9


  always @(posedge clk)
    begin : enable_2_process
      if (reset_x == 1'b1) begin
        out_reg <= 1'b0;
        i <= 8'd0;
        is_enable <= state_type_is_enable_IN_nop0;
      end
      else begin
        if (enb) begin
          i <= i_next;
          is_enable <= is_enable_next;
          out_reg <= out_reg_next;
        end
      end
    end

  always @(enable_1, i, is_enable, length, out_reg) begin
    add_temp = 9'b000000000;
    add_temp_0 = 9'b000000000;
    t_0 = 9'b000000000;
    t_1 = 9'b000000000;
    out_reg_next = out_reg;
    i_next = i;
    is_enable_next = is_enable;
    case ( is_enable)
      state_type_is_enable_IN_S0 :
        begin
          if (i == length) begin
            is_enable_next = state_type_is_enable_IN_nop4;
            out_reg_next =  ! out_reg;
          end
          else if (i < length) begin
            is_enable_next = state_type_is_enable_IN_S0;
            t_0 = {1'b0, i};
            add_temp_0 = t_0 + 9'b000000001;
            if (add_temp_0[8] != 1'b0) begin
              i_next = 8'b11111111;
            end
            else begin
              i_next = add_temp_0[7:0];
            end
          end
        end
      state_type_is_enable_IN_nop4 :
        begin
        end
      default :
        begin
          //case IN_nop0:
          if (enable_1) begin
            is_enable_next = state_type_is_enable_IN_S0;
            t_1 = {1'b0, i};
            add_temp = t_1 + 9'b000000001;
            if (add_temp[8] != 1'b0) begin
              i_next = 8'b11111111;
            end
            else begin
              i_next = add_temp[7:0];
            end
          end
          else if ( ! enable_1) begin
            is_enable_next = state_type_is_enable_IN_nop0;
          end
        end
    endcase
  end

  assign out = out_reg_next;

endmodule  // enable

